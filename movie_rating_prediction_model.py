# -*- coding: utf-8 -*-
"""Movie Rating Prediction Model.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1IeJCOlxN0Emq4QIguMk0urIzgRuEXV83
"""

import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
import plotly.express as px

movies=pd.read_csv('/content/IMDb Movies India.csv', encoding='latin-1')

movies.head()

movies.info()

movies.describe()

movies.isnull().sum()

movies.dropna(subset=["Rating"], inplace=True)

movies.isnull().sum()

movies.dropna(subset=["Actor 1","Actor 2" , "Actor 3","Director","Genre"], inplace=True)

movies.isnull().sum()

movies.head()

movies['Votes']=movies['Votes'].str.replace(',','').astype(int)

movies['Year']=movies['Year'].str.strip('()').astype(int)

movies['Duration']=movies['Duration'].str.strip('min')

movies['Duration'].fillna(movies['Duration'].median(), inplace=True)

movies.isnull().sum()

movies.info()

top=movies.loc[movies['Rating'].sort_values(ascending=False)[:10].index]
top

sns.histplot(data=top,x='Year',hue='Rating',multiple='stack')
plt.title('Distribution of Top 10 Movies', fontsize=15)
plt.xlabel('Year', fontsize=13)
plt.ylabel('Rating', fontsize=13)
plt.tight_layout()
plt.show()

genre_counts=movies['Genre'].value_counts().reset_index()
genre_counts.columns=['Genre','Count']

top_genre=genre_counts.head(5)
top_genre

plt.figure(figsize=(4,4))
plt.pie(top_genre['Count'],labels=top_genre['Genre'],autopct='%1.1f%%',startangle=140,colors=sns.color_palette('pastel'))
plt.title('Movie Genre Distribution', fontsize=15)
plt.axis('equal')
plt.show()

director_avg_rating=movies.groupby('Director')['Rating'].mean().reset_index()
director_avg_rating=director_avg_rating.sort_values(by='Rating',ascending=False)

top_directors=director_avg_rating.head(10)
top_directors

plt.figure(figsize=(10,5))
sns.barplot(data=top_directors,x='Rating',y='Director',palette='viridis')
plt.title('Top Directors by Average Rating', fontsize=20)
plt.xlabel('Average Rating' , fontsize=15)
plt.ylabel('Director', fontsize=15)
plt.show()

plt.figure(figsize=(10,5))
sns.lineplot(data=movies,x='Rating',y='Votes')
plt.title('Votes vs Rating', fontsize=20)
plt.xlabel('Rating', fontsize=15)
plt.ylabel('Votes', fontsize=15)
plt.show()

actor_counts=movies['Actor 1'].value_counts().reset_index()
actor_counts.columns=['Actor','Movie Count']
top_actors=actor_counts.head(10)
top_actors

plt.figure(figsize=(10,5))
sns.barplot(data=top_actors,x='Movie Count',y='Actor',orient='h')

plt.title('Top Actors by Number of Movies', fontsize=20)
plt.xlabel('Number of Movies', fontsize=15)
plt.ylabel('Actor', fontsize=15)
plt.show()

yearly_movie_counts=movies['Year'].value_counts().reset_index()
yearly_movie_counts.columns=['Year','Movie Count']
yearly_movie_counts=yearly_movie_counts.sort_values(by='Year')
yearly_movie_counts

plt.figure(figsize=(10,5))
sns.lineplot(data=yearly_movie_counts,x='Year',y='Movie Count')
plt.title('Number of Movies Released Every Year', fontsize=20)
plt.xlabel('Year', fontsize=15)
plt.ylabel('Number of Movies Released', fontsize=15)
plt.show()

filtered=movies[(movies['Rating']>8) & (movies['Votes']>10000)]
filtered.head(10)

plt.figure(figsize=(15,6))
rv=sns.barplot(data=filtered,x='Name',y='Votes',hue='Rating',dodge=False,width=0.5,palette='muted')
rv.set_xticklabels(rv.get_xticklabels(),rotation=90,ha='right')
rv.legend(loc='upper right')
rv.set_title('Movies with rating greater than 8 and votes greater than 10000')
rv.set_xlabel('Movie Name')
rv.set_ylabel('Votes')
plt.show()

movies['Duration']=movies['Duration'].astype(int)
movies['Year']=movies['Year'].astype(int)

plt.figure(figsize=(10,5))
sns.lineplot(data=movies,x='Year',y='Duration',errorbar=None)
plt.title('Duration of Movies by Year', fontsize=20)
plt.xlabel('Year', fontsize=15)
plt.ylabel('Duration in minutes', fontsize=15)
plt.xticks(np.arange(1917,2023,5))
plt.show()

movies['Genre']=movies['Genre'].str.split(',')
genre= movies.explode('Genre')
genre

plt.figure(figsize=(10,5))
sns.countplot(data=genre,x='Genre',order=genre['Genre'].value_counts().index,palette='viridis')
plt.title('Number of Movies for Each Genre', fontsize=20)
plt.xlabel('Number of Movies', fontsize=15)
plt.ylabel('Genre', fontsize=15)
plt.xticks(rotation=90)
plt.show()

avg_rating_genre=genre.groupby('Genre')['Rating'].mean().reset_index()
avg_rating_genre=avg_rating_genre.sort_values(by='Rating',ascending=False)

plt.figure(figsize=(15,5))
sns.barplot(data=avg_rating_genre,x='Rating',y='Genre',palette='coolwarm')
plt.title('Average Rating of Movies for Each Genre', fontsize=20)
plt.xlabel('Average Rating')
plt.ylabel('Genre')
plt.show()

from sklearn.preprocessing import LabelEncoder
le=LabelEncoder()

trans_data=movies.drop(['Name'],axis=1)
trans_data['Director']=le.fit_transform(movies['Director'])
trans_data['Actor 1']=le.fit_transform(movies['Actor 1'])
trans_data['Actor 2']=le.fit_transform(movies['Actor 2'])
trans_data['Actor 3']=le.fit_transform(movies['Actor 3'])
trans_data['Genre']=le.fit_transform(movies['Genre'].apply(lambda x:','.join(x)))

trans_data.head()

from sklearn.preprocessing import MinMaxScaler
scaler=MinMaxScaler()

sc_data=scaler.fit_transform(trans_data)
sc=pd.DataFrame(sc_data,columns=trans_data.columns)
sc.head()

corr=trans_data.corr(numeric_only=True)
corr['Rating'].sort_values(ascending=False)

sns.heatmap(corr,annot=False,cmap='coolwarm')

from sklearn.model_selection import train_test_split
from sklearn.linear_model import LinearRegression
from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error,mean_absolute_error, r2_score

x=trans_data.drop(['Rating'],axis=1)

y=trans_data['Rating']

x_train,x_test,y_train,y_test=train_test_split(x,y,test_size=0.3,random_state=42)
model=LinearRegression()
model.fit(x_train,y_train)

x_test=np.array(x_test)

y_pred=model.predict(x_test)
y_pred

print('R2 score',r2_score(y_test,y_pred))
print('Mean squared error',mean_squared_error(y_test,y_pred))
print('Mean absolute error',mean_absolute_error(y_test,y_pred))

print(y_test)

plt.figure(figsize=(6, 4))
plt.scatter(y_test, y_pred, alpha=0.5)
plt.title('Linear Regression: Actual vs Predicted Ratings')
plt.xlabel('Actual Ratings')
plt.ylabel('Predicted Ratings')
plt.show()

